package view;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class SettingsForm extends JFrame {
    private JPanel mainPanel;
    private JTextField widthField;
    private JTextField heightField;
    private JTextField foodStaticField;
    private JTextField foodPerPlayerField;
    private JTextField stateDelayField;
    private JTextField deadFoodProbField;
    private JTextField pingDelayField;
    private JTextField nodeTimeoutField;
    private JLabel widthLabel;
    private JLabel heightLabel;
    private JLabel foodStaticLabel;
    private JLabel foodPerPlayerLabel;
    private JLabel stateDelayMsLabel;
    private JLabel deadFoodProbabilityLabel;
    private JLabel pingDelayMsLabel;
    private JLabel nodeTimeoutMsLabel;
    private JButton saveSettingsButton;
    private JTextField nameField;
    private JLabel nameLabel;

    public SettingsForm(int x, int y) {
        this.setContentPane(mainPanel);
        this.pack();
        this.setLocation(x, y);
        this.setVisible(true);
        saveSettingsButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                try {
                    setName();
                    setWidth();
                    setHeight();
                    setFoodStatic();
                    setFoodPerPlayer();
                    setStateDelay();
                    setDeadFoodProb();
                    setPingDelay();
                    setNodeTimeout();
                } catch (InvalidSettingsException | NumberFormatException e) {
                    JOptionPane.showMessageDialog(new JFrame(), e.getMessage(),
                            "Settings error",
                            JOptionPane.ERROR_MESSAGE);
                }
            }
        });
    }

    private void setName() throws InvalidSettingsException {
        if (nameField.getText().length() > 40) {
            throw new InvalidSettingsException("Name must be less than 40 characters.");
        }
    }

    private void setWidth() throws InvalidSettingsException, NumberFormatException {
        if (Integer.parseInt(widthField.getText()) < 10
                || Integer.parseInt(widthField.getText()) > 100) {
            throw new InvalidSettingsException("Width must be between 10 and 100.");
        }
    }

    private void setHeight() throws InvalidSettingsException, NumberFormatException {
        if (Integer.parseInt(heightField.getText()) < 10
                || Integer.parseInt(heightField.getText()) > 100) {
            throw new InvalidSettingsException("Height must be between 10 and 100.");
        }
    }

    private void setFoodStatic() throws InvalidSettingsException, NumberFormatException {
        if (Integer.parseInt(foodStaticField.getText()) < 0
                || Integer.parseInt(foodStaticField.getText()) > 100) {
            throw new InvalidSettingsException("Food static must be between 0 and 100.");
        }
    }

    private void setFoodPerPlayer() throws InvalidSettingsException, NumberFormatException {
        if (Double.parseDouble(foodPerPlayerField.getText()) < 0
                || Double.parseDouble(foodPerPlayerField.getText()) > 100) {
            throw new InvalidSettingsException("Food per player must be between 0 and 100.");
        }
    }

    private void setStateDelay() throws InvalidSettingsException, NumberFormatException {
        if (Integer.parseInt(stateDelayField.getText()) < 1
                || Integer.parseInt(stateDelayField.getText()) > 10_000) {
            throw new InvalidSettingsException("State delay must be between 1 and 10000.");
        }
    }

    private void setDeadFoodProb() throws InvalidSettingsException, NumberFormatException {
        if (Double.parseDouble(deadFoodProbField.getText()) < 0
                || Double.parseDouble(deadFoodProbField.getText()) > 1) {
            throw new InvalidSettingsException("Dead food probability must be between 0 and 1.");
        }
    }

    private void setPingDelay() throws InvalidSettingsException, NumberFormatException {
        if (Integer.parseInt(pingDelayField.getText()) < 1
                || Integer.parseInt(pingDelayField.getText()) > 10_000) {
            throw new InvalidSettingsException("Ping delay must be between 1 and 10000.");
        }
    }

    private void setNodeTimeout() throws InvalidSettingsException, NumberFormatException {
        if (Integer.parseInt(nodeTimeoutField.getText()) < 1
                || Integer.parseInt(nodeTimeoutField.getText()) > 10_000) {
            throw new InvalidSettingsException("Node timeout must be between 1 and 10000.");
        }
    }



    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(10, 2, new Insets(0, 0, 0, 0), -1, -1));
        widthLabel = new JLabel();
        widthLabel.setHorizontalAlignment(4);
        widthLabel.setText("Width");
        mainPanel.add(widthLabel, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(129, 16), null, 0, false));
        widthField = new JTextField();
        widthField.setText("40");
        widthField.setToolTipText("");
        mainPanel.add(widthField, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(50, -1), null, 0, false));
        heightLabel = new JLabel();
        heightLabel.setHorizontalAlignment(4);
        heightLabel.setText("Height");
        mainPanel.add(heightLabel, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(129, 16), null, 0, false));
        heightField = new JTextField();
        heightField.setText("30");
        mainPanel.add(heightField, new com.intellij.uiDesigner.core.GridConstraints(2, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(50, -1), null, 0, false));
        foodStaticLabel = new JLabel();
        foodStaticLabel.setHorizontalAlignment(4);
        foodStaticLabel.setText("Food Static");
        mainPanel.add(foodStaticLabel, new com.intellij.uiDesigner.core.GridConstraints(3, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(129, 16), null, 0, false));
        foodPerPlayerLabel = new JLabel();
        foodPerPlayerLabel.setHorizontalAlignment(4);
        foodPerPlayerLabel.setText("Food Per Player");
        mainPanel.add(foodPerPlayerLabel, new com.intellij.uiDesigner.core.GridConstraints(4, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(129, 16), null, 0, false));
        stateDelayMsLabel = new JLabel();
        stateDelayMsLabel.setHorizontalAlignment(4);
        stateDelayMsLabel.setText("State Delay Ms");
        mainPanel.add(stateDelayMsLabel, new com.intellij.uiDesigner.core.GridConstraints(5, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(129, 16), null, 0, false));
        deadFoodProbabilityLabel = new JLabel();
        deadFoodProbabilityLabel.setHorizontalAlignment(4);
        deadFoodProbabilityLabel.setText("Dead Food Probability");
        mainPanel.add(deadFoodProbabilityLabel, new com.intellij.uiDesigner.core.GridConstraints(6, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(129, 16), null, 0, false));
        pingDelayMsLabel = new JLabel();
        pingDelayMsLabel.setHorizontalAlignment(4);
        pingDelayMsLabel.setText("Ping Delay Ms");
        mainPanel.add(pingDelayMsLabel, new com.intellij.uiDesigner.core.GridConstraints(7, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(129, 16), null, 0, false));
        nodeTimeoutMsLabel = new JLabel();
        nodeTimeoutMsLabel.setHorizontalAlignment(4);
        nodeTimeoutMsLabel.setText("Node Timeout Ms");
        mainPanel.add(nodeTimeoutMsLabel, new com.intellij.uiDesigner.core.GridConstraints(8, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(129, 16), null, 0, false));
        foodStaticField = new JTextField();
        foodStaticField.setText("1");
        mainPanel.add(foodStaticField, new com.intellij.uiDesigner.core.GridConstraints(3, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(50, -1), null, 0, false));
        foodPerPlayerField = new JTextField();
        foodPerPlayerField.setText("1");
        mainPanel.add(foodPerPlayerField, new com.intellij.uiDesigner.core.GridConstraints(4, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(50, -1), null, 0, false));
        stateDelayField = new JTextField();
        stateDelayField.setText("1000");
        mainPanel.add(stateDelayField, new com.intellij.uiDesigner.core.GridConstraints(5, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(50, -1), null, 0, false));
        deadFoodProbField = new JTextField();
        deadFoodProbField.setText("0.1");
        mainPanel.add(deadFoodProbField, new com.intellij.uiDesigner.core.GridConstraints(6, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(50, -1), null, 0, false));
        pingDelayField = new JTextField();
        pingDelayField.setText("100");
        mainPanel.add(pingDelayField, new com.intellij.uiDesigner.core.GridConstraints(7, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(50, -1), null, 0, false));
        nodeTimeoutField = new JTextField();
        nodeTimeoutField.setText("800");
        mainPanel.add(nodeTimeoutField, new com.intellij.uiDesigner.core.GridConstraints(8, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(50, -1), null, 0, false));
        saveSettingsButton = new JButton();
        saveSettingsButton.setText("Save Settings");
        mainPanel.add(saveSettingsButton, new com.intellij.uiDesigner.core.GridConstraints(9, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        nameField = new JTextField();
        nameField.setText("Player");
        mainPanel.add(nameField, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        nameLabel = new JLabel();
        nameLabel.setHorizontalAlignment(4);
        nameLabel.setHorizontalTextPosition(11);
        nameLabel.setText("Name");
        mainPanel.add(nameLabel, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(129, 16), null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

}
